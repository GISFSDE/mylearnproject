package pers.lxl.mylearnproject.programbase.designpatterns;
/*Design Patterns软件设计中，被反复使用的一种代码设计经验。
使用设计模式的目的是为了可重用代码，提高代码的可扩展性和可维护性。
开闭原则
由Bertrand Meyer提出的开闭原则（Open Closed Principle）是指，软件应该对扩展开放，
而对修改关闭。这里的意思是在增加新功能的时候，能不改代码就尽量不要改，
如果只增加代码就完成了新功能，那是最好的。

里氏替换原则
里氏替换原则是Barbara Liskov提出的，这是一种面向对象的设计原则，
即如果我们调用一个父类的方法可以成功，那么替换成子类调用也应该完全可以运行。
设计模式把一些常用的设计思想提炼出一个个模式，然后给每个模式命名，
这样在使用的时候更方便交流。GoF把23个常用模式分为

创建型模式-提供创建对象的机制， 增加已有代码的灵活性和可复用性。
结构型模式-介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。
行为型模式-负责对象间的高效沟通和职责委派。

学习设计模式，关键是学习设计思想，不能简单地生搬硬套，
也不能为了使用设计模式而过度设计，要合理平衡设计的复杂度和灵活性，
并意识到设计模式也并不是万能的。
算法更像是菜谱： 提供达成目标的明确步骤。 而模式更像是蓝图：
 你可以看到最终的结果和模式的功能， 但需要自己确定实现步骤。
 意图部分简单描述问题和解决方案。
动机部分将进一步解释问题并说明模式会如何提供解决方案。
结构部分展示模式的每个部分和它们之间的关系。
在不同语言中的实现提供流行编程语言的代码， 让读者更好地理解模式背后的思想。*/
public class HelloClass {
}
